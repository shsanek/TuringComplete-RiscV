=== levels/Spacial Invasion ===

$19967210826470* 注意，空中存在激光时，是无法发射新的激光的。
$16294185981398* 我们飞船的货仓里了进了几只太空老鼠。
$11505369795084* 如需关于机器人的帮助，请参阅[color=#e49f44][url=the_robot]机器人操作指南[/url][/color]。代码编辑器里也有指向操作指南的链接。
$10515630949378* 我们已经把你的电脑连接到了我们的高科技机器人上，接下来你的任务是给机器人编程，指挥它发射激光来消灭掉这些太空老鼠。


=== ui/state_ui/title_screen/exit ===

$12639868461113* 退出


=== components/Output 1 ===

$12242923444593* 1 位输出


=== levels/RAM ===

$17967666262990* 这一关里，你需要完成如下任务：从输入端依次读取 32 个数值，再按照输入的顺序将 32 个数原样输出。在读取完所有输入前就开始输出也视作失败。
$13520918982355* 向你的计算机中添加一个内存模块，使之增加 256 个字节的存储空间。你需要用一种技术手段来指定你访问的到底是内存中的哪个位置上的数据。更具体地讲，你需要额外添加一个寄存器，根据这个寄存器里的数值，来确定要访问的内存地址。每次读写内存前，你都需要先更新这个地址寄存器中的地址值。


=== levels/byte_less_i ===

$16755383054285* [center]判断第一个输入值是否严格小于第二个输入值。[/center]
$19006843777401* 设计一个电路，在第一个输入严格小于第二个输入时，输出 [ON] 。注意，在本关中，输入将被视作[color=#dd6576]有符号整数[/color]。
$46083799633716* 你确定 {input_1} 严格小于 {input_2} 吗？


=== ui/toggles/level_map ===

$71951682957395* 关卡图


=== misc/button_next ===

$50213503063080* 下一时钟刻（快捷键 F5）


=== components/MemoryProbeBit ===

$13846578075327* 在自定义元件上显示其中某个存储单元的值，也可链接到程序编辑器的监视槽
$25103579211328* 存储器探针（1 位）


=== components/DualPortRam ===

$13408945557666* 包含两个读取针脚的内存单元
$30400404542678* 双口内存


=== levels/maze ===

$13225915898937*
如果你打算继续完成后面的关卡的话，我会向你传授关于内存、栈和函数调用的神秘知识，你也将有机会接触到更多像这关一样充满趣味性的挑战。
		
不过首先，你得设计一台更好的电脑。[color=#e49f44]OVERTURE[/color] 是一台不错的新手教学机，但它很笨拙，编出的程序也是一团乱麻。如果你想在头发掉光（或者被自己拔光）以前完成后续任务的话，你就需要搭建一个更复杂的架构—— [color=#e49f44]LEG[/color] 架构。
$17275059688693* 恭喜，你赢了！干得漂亮！
$13741358519166* 这就是传说中的迷宫了。用你的电脑控制机器人走到出口就算胜利！
$11103446544344* 当然，你也可以休息休息。你已经通过了我们的智力测试，不必担心自己会被吃掉了。
$19331074553774*
编写一段程序，实现让机器人走出迷宫的算法。

本关有一定难度，在着手编写代码之前，可以先写一写算法伪代码，厘清思路。

如果觉得太困难的话，不妨看看这个[color=#e63e5b][url=maze]提示[/url][/color]。

[tip]请牢记立即数不能大于 63 这一限制。试图让程序跳转到第 63 行以后的位置是本关里一个常见的错误。[/tip]


=== misc/level_gate_component_icon ===

$83440578602427* 解锁元件


=== components/Switch64 ===

$80980797636768* 切换线路通断
$93223372486795* 64 位开关


=== levels/any_doubles ===

$16587030847545* 我们的科技非常先进，连叠袜子这样的事情都是机器自动完成的。但是不巧，叠袜子机上给袜子配对的检测器刚才坏掉了。
$14373083988184*
本关有 4 个输入。
有 2 个或更多的输入为 [ON] 时，输出 [ON]。

[tip]别把这一关想得太复杂。[/tip]


=== ui/options/Robot Controls ===

$58799802152286* 机器人控制选项


=== misc/delay_overlay ===

$85430022417382* 显示延迟量


=== levels/call_ret ===

$15840165316981*
这一关里，你的任务是向你的电脑里添加负责函数调用和返回的指令：[color=#e49f44]call[/color] 和 [color=#e49f44]ret[/color] 。

注意，当你从子函数返回调用点时，返回的位置应该在 [color=#e49f44]call[/color] 指令的下一行，否则你的程序会进入死循环。
函数调用指令 [color=#e49f44]call[/color] 对应的具体操作如下：
 [i]- 将程序计数器的值和指令长度相加，并将其[color=#e49f44]压入[/color]栈顶[/i]
 [i]- 令程序计数器跳转到函数入口处[/i]

函数返回指令 [color=#e49f44]ret[/color] 对应的具体操作如下：
 [i]- [color=#e49f44]弹出[/color]栈顶值，并将其写入程序计数器[/i]

你可以将某些数据写入寄存器中，从而向函数传递信息，或让函数返回计算结果。如果采取这种传参方式，就请特别留意子函数运行过程中到底会改写哪些寄存器。
$19416009887091*
有些时候，重复利用某段代码能够简化编程流程。这些需要重用的代码可以单独写成几段“函数”。要重用这些代码片段，我们就需要让代码能够[color=#e63e5b][url=termonology]跳转[/url][/color]这些函数的开头，等代码执行到函数结尾的时候再跳转回来。我们把跳转到函数开头的操作称为函数“调用”（call），从函数结尾处跳转回来的操作则称作函数“返回”（return）。
	
不过，要想真正实现代码重用，就要解决一个问题：返回跳转操作如何才能跳转到子函数调用点处（一个函数可以被多次调用，因而会对应多个不同的返回位点）。

一种思路是在跳转前把程序计数器的值存入寄存器中，这样就能让记录函数返回位置。不过这种思路的问题在于，函数调用无法嵌套进行，因为进行下一次调用时，第一次保存的返回地址就会被覆盖掉。

比如，我们需要让函数 A 调用函数 B，而 B 又调用了函数 C 。当我们需要从函数 C 返回 B 时，我们需要 B 中的返回地址；而 B 返回时，我们又需要 A 中的返回地址。一般来说，不管我们调用何种函数，也不管它们在代码中的具体顺序如何，我们最后记录的返回地址总会是最先用到的。这种“后进先出”的需求对应的正是栈的工作模式。
$19369640789869* 我们最近的经费预算有点紧张，只能给大家降薪，结果实验室的助手们都罢工了。所以，这次测试需要你给自己打分。当然，这也能让我们测试你的可信度和成熟度。
$15463931654475* [center]向电脑中添加 “call” 和 “ret” 指令，并实现对应的功能[/center]


=== levels/push_pop2 ===

$10062117579269* 向你的电脑中添加一个栈
$14685569269160*
本关里，你需要向你的电脑添加一个栈，然后设置相应的指令，并编写一段程序以完成测试。
当输入为 0 时，你需要弹出（[color=#e49f44]pop[/color]）栈顶值，并将其发送到输出设备中。当输入不为 0 时，你需要将输入的值压入（[color=#e49f44]push[/color]）栈中。
$18561605111721* PUSH - 输入值 {input} 压栈
$59658696292688* POP - 弹出栈顶值 {value}


=== levels/odd_ticks ===

$18510295620397* 请设计电路，在偶数刻输出 [OFF] ，奇数刻输出 [ON] 。
$16987046679863* 上一关里，你已经知道了我们不允许电路中存在循环依赖。现在你需要掌握一种例外情况。
$16037516781370*
游戏中方形针脚的输入不会影响同一刻的输出值，因此，方形针脚不会造成循环依赖。
	
	[img]dialogue/delay_buffer.png[/img]
$17588119878416*
新器件“延迟线”的输入端可以与自身的输出端相连。这是因为这个器件当前的输入信号直到下一时钟刻才会对电路产生影响。
	
[img]dialogue/delay_buffer.png[/img]


=== misc/options ===

$49251062339706* 选项


=== levels/byte_constant ===

$12641789008694* 搭建一个电路，使之始终输出 164。


=== misc/solution_option ===

$21618236951146* 查看解法


=== misc/run_fast ===

$49363678936533* 快速运行（右键单击以调整期望速度）


=== components/Output 1 + 1B ===

$81929942356043* 输出


=== components/FullAdder ===

$57559382166174* 执行 3 位加法，并输出结果和溢出进位
$77669928463861* 全加器


=== levels/turing_complete ===

$15326252036920* 之前的关卡中，只有代码能影响数据，现在也该是时候让数据来影响代码运行了。添加了条件跳转的能力后，我们的电脑就能运行任何算法，完成一切可行的计算了。
$16583885726240* 你居然成功了，地球人！我本来以为你不过是看起来很奇怪的某种无毛猿类，但你确实造出一台真正的电脑来了，挺厉害！
$10510746154639* 时钟第 1 刻时，程序模块接收的地址应为 1 。
$10317244906317* 未找到程序模块
$14587485007736* 到目前为止，我们所有的程序都只能一字节一字节地依序运行。
$19649119273248*
我们最后要完成的一项任务，是添加一种指令（[INSTRUCTIONS]）并配置相应的硬件结构，从而实现条件跳转。

当指令的最高两位被置为 1 （[ON][ON]）时，电脑应进入条件跳转模式。该模式下，我们将判断 3 号寄存器（REG 3）中的数值是否满足指令的最低 3 位指定的条件。如果满足指令指定的条件，我们就用 0 号寄存器中的值来覆盖程序计数器的数值。
能够有条件地改写程序计数器，就意味着我们能够在满足特定条件时，跳过某些指令（[INSTRUCTIONS]），或让某些指令反复循环运行。

条件的类型如下：
[OFF] [OFF] [OFF] 永不跳转
[OFF] [OFF] [ON] [color=#e49f44]REG 3[/color] = 0 时跳转
[OFF] [ON] [OFF] [color=#e49f44]REG 3[/color] < 0 时跳转
[OFF] [ON] [ON] [color=#e49f44]REG 3[/color] ≤ 0 时跳转
[ON] [OFF] [OFF] 必定跳转
[ON] [OFF] [ON] [color=#e49f44]REG 3[/color] ≠ 0 时跳转
[ON] [ON] [OFF] [color=#e49f44]REG 3[/color] ≥ 0 时跳转
[ON] [ON] [ON] [color=#e49f44]REG 3[/color] > 0 时跳转

上述条件和已经保存在元件工坊中的条件判断组件的输出是一致的。


=== components/Input 1 ===

$12746117288689* 输入


=== components/Neg16 ===

$17253409670931* 取反器
$57512333327652* 将输入数值的符号反转


=== levels/Second Tick ===

$14355963067874* 只在第二刻输出 [ON] 。
$17526582195506* 你也知道，我们进行的这一系列测试，最终的成果将是一台完整的电脑。
$15726318553190* 这是我们考虑不吃掉你的首要原因。
$19277843280528*
 [color=#b72d41][b]提示：[/b][/color]
 双击组件即可
 一并选中其针脚
$15296208528991* 按照我们的法律，能通过这一关的生物会被认定为具有知觉。


=== components/Output1Car ===

$12896765714603* 进位


=== components/Rol16 ===

$48583573494467* 循环左移
$73379230742631* 对输入执行按位循环左移


=== components/Equal16 ===

$97954874255512* 判断两端输入是否相等
$33633607925660* 判等器


=== levels/buffer ===

$10260210687588* [center]测试 2：左侧输入为 [img]dialogue/on.png[/img]，右侧输出应为 [img]dialogue/on.png[/img]。[/center]
$13309706297402* [center]测试 3: 右侧输入为 [img]dialogue/on.png[/img]，左侧输出应为 [img]dialogue/off.png[/img]。[/center]
$17005228759908* [center]确保 [img]dialogue/on.png[/img] 只能从左向右传输。[/center]
$18349621873762* [center]测试 1: 两端输入均为 [img]dialogue/off.png[/img]，两侧都不应变为 [img]dialogue/on.png[/img]。[/center]
$15504762262759*
这一关的电路图上有两个特殊的元件。它们既能做输入针脚，也能做输出针脚。

搭建电路，确保信号只能从左向右通过。本关共有三组测试。

[b]测试 1[/b]：两侧均为 [OFF] 。

[b]测试 2[/b]：左侧输入 [ON]，此时右侧输出应为 [ON]。

[b]测试 3[/b]：右侧输入 [ON]，此时左侧输入应为 [OFF]。


=== components/Output 4 ===

$90190739202646* 输出


=== misc/select_color ===

$97461374731210* 导线颜色


=== ui/state_ui/state_ui_output_bit ===

$40754755480566* 输出


=== levels/component_factory ===

$14665712485657* 该元件不占据任何片上面积，无法放置。
$17077079648771* 利用存档系统，你可以添加、删除自定义元件，也可以进行重命名。
$19551383617326*
欢迎来到元件工坊。你在此创建的电路可以在稍后搭建计算机架构时作为自定义元件直接使用。
自定义元件的功能和外形取决于你在此设计的电路的具体结构和外观。
$12516102012088* 当前元件不占据任何面积，因而无法在电路中使用。请在电路图上放置元件，让电路占据一定的面积（针脚所在的格子除外）。
$14712417427860* 本关是一个工具性关卡，不是一个挑战关卡，因此你可以随时回到关卡图界面，并继续完成后续任务。
$15549447390000* 同一个方格内有两个输入/输出针脚。由于针脚重叠，当前元件将无法使用。


=== misc/instr_delete ===

$91861509153454* 删除


=== components/Register32 ===

$65405398199118* 32 位存储单元
$22031255978461* 32 位寄存器


=== misc/ui_panel/outputs ===

$29350436761480* 输出


=== levels/ai_showdown ===

$14940806461794*
它唯一的弱点是好赌。我们已经吸引了它的注意力，让它跟你来打牌。它跟我们保证，如果你赢了，它就投降。
一定要赢，你是我们唯一的希望了！
$17297225655678* NAK 02 是我们的智能工程机器人。它很聪明，但有些时候会耍流氓，甚至在飞船上煽动叛乱。
$18848103966031*
游戏规则：桌面上共有 12 张牌，玩家和机器人轮流取牌，每次只能取走1~3张牌。玩家先取，取走最后一张牌的一方失败。

输入端读入的数值为当前桌面上剩余的纸牌数量。向输出端发送数字 1、2、3 ，则玩家取走对应数量的纸牌。NAK 02 会在玩家之后立刻采取行动，所以玩家也可以在输出数值后立即读取输入，来获取机器人采取行动后的剩余牌数。
$11794110848012* 这一回它又占据了飞船主控室，还劫持了船长。


=== components/64Ram ===

$63410290483563* 低逻辑门开销，但读写速度慢的内存
$78790416494254* 内存


=== components/Nand16 ===

$63870790225686* 对输入进行按位与非
$56507506086622* 8 位与非门（NAND）


=== misc/ui_comment ===

$69987793052607* 线路注释（单击线路以添加）


=== components/Program8_1 ===

$11057354704814* 可编程只读存储器
$12805545963716* 程序模块


=== components/InputOutput ===

$26488480303865* 输入/输出


=== components/Mux16 ===

$75979055121665* 16 位数据选择器
$13997767115693* 二选一选通器


=== components/Mul16 ===

$49880767097125* 将两路输入值相乘
$62247409328063* 乘法器


=== levels/delay_level ===

$19986989895202*
所有元件都有一个延迟量。一个电路中，总的延迟量是由延迟最多的那条路径决定的。为了减小延迟量，This means you normally want to put things in parallel.
在本关里，你要向我证明你能够理解这些概念。
$11246430085016* 注意，你可以通过单击右上角的沙漏图标，来切换延迟路径的叠加显示。
$12817338693402* 电路中的延迟量是由逻辑门的延迟量推导而来。基本逻辑门的延迟量都为 2。请设计一个电路，让它包含 5 个基础逻辑门，并具有 6 的延迟量。


=== levels/byte_and ===

$15885763626223* 搭建一个电路，对两个单字节（8 位）输入进行按位与（bitwise AND）操作。


=== ui/toggles/level_log2 ===

$91515053618360* 手册


=== misc/wire_color ===

$78287906849040* 导线颜色


=== levels/or_gate_3 ===

$15448906128695* 设计一个有 3 路输入的或门。


=== ui/options/Controls ===

$53266310714298* 控制选项


=== ui/state_ui/title_screen/play ===

$66967233942803* 开始游戏


=== nim/backend_lib/level_list ===

$58391129129347* 寄存器
$45936227746026* 计数器
$16881141174140* 二进制速算
$12946639957230* 非门（NOT）
$37136208388559* RS 锁存器
$32191988336459* 优雅存储
$59136962133320* 逻辑模块
$30920780473397* 循环依赖
$83321010943153* 信号计数
$58769021955965* 3 位解码器
$78673715398197* 立即数
$49679174636208* 8 位异或门
$40356575891647* 8 位或门
$44393538021725* 激光炮直瞄
$61228036919534* 合金塔
$87426564872318* 除法
$24593959732668* 相反数
$19487493622742* 半加器
$26705128002562* 条件判断
$94163943335575* 沙盒
$64662599400870* 1 位取反器
$14193654974055* 有符号小于
$59485174474959* 美味排序
$74096060570427* 宽指令
$14522992467987* 或门（OR）
$30630492494839* 8 位非门
$11457737665157* 一把线，像挂面
$27566801288091* 元件工坊
$85514901357243* 8 位加法器
$98013649264532* 栈
$35790581910835* 第二刻
$94979277765051* 机器赛跑
$13303326918621* 与非门（NAND）
$16463062897451* 原力觉醒
$28827008935802* 实验室
$77495536880911* 或非门（NOR）
$61466151084505* 太空入侵
$20858506932774* 与门（AND）
$92696642439976* AI 打牌
$74688348772072* 总线
$62326481348276* 迷宫
$50884376329157* 小盒子
$70651296323768* 异或门（XOR）
$31140969090253* 行星之名
$74512388889988* 算数模块
$42873691377272* 加 5 等于几
$36114120875026* 密码锁
$45773199639367* 奇变偶不变
$68155633878444* 延迟量
$15420972347773* 随机存储器（RAM）
$43018398941741* 高电平
$17198602105978* 无符号小于
$33343343932901* 图灵完备
$95989050249094* 三路与门
$81417895515868* 1 位开关
$69830943995038* 单行道
$63331549672739* 操作码
$87626070552799* 全加器
$13219675195117* 奇数个信号
$62167495140389* 移位
$28985439820134* 半字节相乘
$94896856420525* 同或门（XNOR）
$25805639594354* 程序
$57870391153000* 立即数
$96825664933181* 新品上市
$56272944092958* 延迟线
$86717899742637* 存储一字节
$53092952738479* 输入选择器
$70993791338383* 异或
$77453667419150* 指令解码器
$96898830278153* 8 位常数
$17750429607702* 1 位解码器
$59939822079116* 负数
$79570913613529* 加倍
$91267697977186* 十六进制速算
$49328023903824* 相等
$74292408260828* 计算单元
$45480765206717* 条件判断 II
$71126291573555* 成对的麻烦
$33132016601448* 压栈与弹栈
$75225719777307* 水上乐园
$64615090872051* 函数
$84208736840052* 时间掩码
$36221227239949* 跳舞机器
$91954159574064* 三路或门


=== misc/run ===

$67345621265845* 时钟连续运行（快捷键 F6）


=== components/Input16 ===

$34560561101846* 输入


=== levels/Nor GATE ===

$11362258372706*
地球上大多数生物充满了攻击性，也不知道怎么集中注意力。

要想成功通过我们的测验，你就要学会逻辑思考，不能只想着搞破坏。


=== components/Output16 ===

$37381472194529* 输出


=== misc/watchable_state ===

$58678516111149* 编辑监视态


=== components/Input 3 ===

$70689623552857* 输入


=== misc/lab_toggle ===

$16432178820878* 实验室模式


=== levels/byte_equal ===

$17156565273196* 当两路输入相等时，输出 [ON] 。


=== ui/options/General ===

$36195388998735* 通用选项


=== misc/sandbox_toggle ===

$30516879701896* 沙盒模式


=== main_menu/sandbox_button ===

$16857608955464* 沙盒模式


=== misc/factory ===

$53123649343022* 元件工坊


=== components/Output 2 ===

$73255344581755* 输出


=== levels/xnor ===

$11090938799865* 搭建一个和异或门输出相反的逻辑门，即同或门（XNOR）。


=== components/Input32 ===

$10677927084411* 输入


=== ui/top_bar/gate_score ===

$16224450605442* 逻辑门分数：


=== misc/score_sync ===

$76911045833478* 上传分数


=== misc/level_gate_unlocks_unknown ===

$76731326010721* 解锁神秘物体


=== misc/level_gate_manual_icon ===

$22002156022920* 解锁手册词条


=== levels/Masking Time ===

$19351773688761* 剩余时钟刻：{ticks_left}  输入：{input}
$16810715868480* 计算输入值模 4 的结果。
$17375862136921*
我们星球上每个星期有 4 天，分别是星期零，星期壹，星期贰和星期叁。我听说有的地球人会把星期贰的日子算错？
	
这倒是不怎么奇怪。
$65431688078892*
本关里，你需要从输入端读取一个整数，并输出这个数除以 4 的余数（对 4 取模）。

本关的难度在于，你计算每个输出，用时都不得超过 {ticks_per_test} 个时钟刻。

注意，你不需要对硬件作任何改动。你只需要找到快速进行模 4 计算的技巧。
如果你卡关了，可以参看这个[color=#e63e5b][url=masking_time]提示[/url][/color]。
$81055582534899* 不管怎么说，新年就要到了。我们需要你来算一下每个人的生日都在一星期里的哪一天。我会给你日期，你只需要在 {ticks_per_test} 时钟刻内向我报上那是星期几就行。


=== levels/NAND Gate ===

$17420270098223* 本关中，你将了解到与非门（NAND）是如何运作的。请在这一关尽量[color=#dd6576]牢记[/color]与非门（NAND）的输出值（真值表），否则你接下来会很容易卡关！
$11034378482152* 正确！你成功解锁了与非门（NAND）。利用这个元件，你就能造出电脑里所有的东西了！
$18270083417453* 检验结果
$19208664264770* [b]操作指南[/b]\n点击下方图表中最后一行的灰色按钮。
$17923274216766* 我们因此初步认定你大概不是一种植物。
$14777350869870* 你在上个测试中发挥得不错。
$17994568832660* [b]操作指南[/b]\n电路中间的与非门（NAND）会改变流出的信号。\n利用窗口左侧的按钮调节输入状态，观察它们对输出的影响，并在下方的结果栏中填入正确的输出值。


=== components/Input 2 ===

$86870364449392* 输入


=== misc/ide_control_link ===

$80788685813993* 机器人控制


=== ui/top_bar/scores ===

$56840961921536* 逻辑门分数： \n延迟量分数：


=== components/Output32 ===

$37476623180671* 输出


=== misc/profile ===

$32835651830157* 个人资料


=== components/Input64 ===

$31709565019284* 输入


=== components/Input 4 ===

$11447837612693* 输入


=== misc/program_edit_signals ===

$98772447663910* 编辑监视态


=== misc/credits ===

$15234594767991* 致谢


=== misc/delete ===

$53448014080434* 删除（快捷键 右键单击）


=== misc/specifications ===

$68054407020318* 指令


=== component_panels/Counter ===

$57936010210151* 计数器单步增量：{amount}


=== components/Input1_1B ===

$10517158300617* 输入


=== misc/factory_back ===

$98930461722118* 返回


=== misc/component_factory_toggle ===

$55499239951858* 元件工坊


=== ui/toggles/negative_numbers ===

$50924073287410* 切换数字模式


=== misc/reset ===

$39440928972984* 复位（快捷键 F4）


=== components/Output64 ===

$43552728118031* 输出


=== misc/factory_back_inner ===

$12211557416281* 返回


=== ui/toggles/race_condition ===

$75558678297830* 循环依赖


=== misc/instr_clone ===

$69090690657232* 复制指令


=== levels/Crude Awakening ===

$12508086025944*
我们将对你展开生命智力测试。

测试规则很简单，造一台电脑就行。我们将会吃掉不具备这种智力的生物。祝你好运。
$16321577947087* 恭喜恭喜，你被绑架了！
$19257730429557*
信号从输入端（IN）流向输出端（OUT）。
窗口左上角“输入”字样下方有一个绿色图标，用于切换输入状态。
现在请点击一下，关闭输入端。
$17675121574388* 注意，输出端（OUT）也关闭了。\n这是因为输入端（IN）的信号已经被切断了。


=== misc/program_edit_button ===

$38481453712356* 编辑程序


=== misc/wire_draw ===

$59836059268386* 添加导线（快捷键 Alt+左键拖动）


=== ui/toggles/level_log ===

$38557550573896* 关卡说明


=== misc/change_schematic ===

$79554853897000* 切换架构图


=== misc/inst_new_rule ===

$41064305626707* 新建指令


=== misc/multi_select ===

$85147529532131* 多选（快捷键 SHIFT+左键拖动）


=== levels/always_on ===

$17712385236630* 搭建一个始终输出高电平（[ON]）的电路。


=== levels/byte_xor ===

$19636386696963* 搭建一个电路，对两个单字节输入进行按位异或（bitwise XOR）。


=== misc/menu ===

$56916384895438* 主菜单


=== components/Output 3 ===

$96269858195218* 输出


=== components/InputConditions ===

$75386511637758* 输入


=== components/Output 1B ===

$77044600156969* 输出


=== levels/the_bus ===

$72472660427162* [center]从输入端 {input_nr} 将数值复制到输出端 {output_nr}[/center]
$85140574084420* [center]从正确的输入端将数值复制到正确的输出端[/center]


=== components/Output8zLevel ===

$49513138880387* 输出


=== levels/and_gate_3 ===

$14788981567936* 搭建一个有 3 个输出端的与门（AND）。


